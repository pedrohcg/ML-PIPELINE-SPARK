version: '3.8'
name: dsa-cluster-yarn

services:
  #faz o build da imagem com o dockerfile se ela nao existir
  spark-master-yarn:
    container_name: dsa-spark-master-yarn
    build:
      dockerfile: Dockerfile
      context: .
    image: dsa-spark-image-yarn
    entrypoint: ['./entrypoint.sh', 'master']
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081"]
      interval: 5s
      timeout: 3s
      retries: 3
    volumes:
      - ./dados:/opt/spark/data
      - ./jobs:/opt/spark/apps
      - spark-logs:/opt/spark/spark-events
    env_file:
      - .env.spark
    ports:
      - '9091:8080'
      - '9871:9870'
      - '7071:7077'
      - '8081:8088'
    
  spark-history-server-yarn:
    container_name: dsa-spark-history-yarn
    image: dsa-spark-image-yarn
    entrypoint: ['./entrypoint.sh', 'history']
    depends_on:
      - spark-master-yarn
    env_file:
      - .env.spark
    volumes:
      - spark-logs:/opt/spark/spark-events
    ports:
      - '18081:18080'
  #Nao possui container name pois nao sabemos quantos workers vao ser criados, nesse caso ele vai colocar o nome do servico seguido de um numero incremental
  spark-worker-yarn:
    image: dsa-spark-image-yarn
    entrypoint: ['./entrypoint.sh', 'worker']
    depends_on:
      - spark-master-yarn
    env_file:
      - .env.spark
    volumes:
      - ./dados:/opt/spark/data
      - ./jobs:/opt/spark/apps
      - spark-logs:/opt/spark/spark-events
  
#Nao precisa mapear pois esta sendo mapeado dentro dos containers
volumes:
  spark-logs: